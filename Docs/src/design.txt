Vapula将函数的执行过程加以抽象
得出以下设计：

组件包含功能，即方法（由于函数具有非null返回值暗示，故换用术语 方法）
方法具体到一次执行，即任务。
任务本质是调用组件的物理实体暴露出的函数接口，即入口。
组件的物理实体和访问操作通过驱动隔离。
得到任务需要配套一套数据和上下文，放在私有栈中。
执行任务需要一套机制进行调度，即工作者机制。

调用任务必然涉及数据传输
Vapula数据传输有以下基本原则：
数据集由记录组成
每条数据记录包含一个字节长度、数据指针
Vapula进行任何数据传输都是无类型的

如需在无类型数据和有意义数据之间进行转换需要序列化器和反序列化器

常规值类型可通过记录传递
字符串也可以传递，要求串尾空字节也需要计算在总长内，必须使用UTF8编码，使用char(int8)作为基本类型
高级语言的对象必须拆分到字段，然后存储其中数据，或实现句柄模式，存储句柄码
也可以使用byte[]或JSON或两者结合进行序列化和反序列化

序列化时byte[]必须转换成base64编码字符串传输

Vapula的写操作和传输操作无视空输入

更新的设计要求
Vapula Framework中
Bridge用来实现运行时
Model用来实现建模

Vapula Bridge 核心的对象构建
AccessMode 用于Deliver时验证双方的访问方向
State ControlCode ReturnCode 用于Context对象

	//candy for C++
	public:
		//write string as 8-bit (UTF8)
		void WriteText(pcstr data);

		//read string as 8-bit (UTF8)
		pcstr ReadText();

		//write data at offset (at) by type (T)
		//write new data when size is not enough
		template<typename T>
		void WriteAt(T data, uint32 at = 0)
		{
			uint32 x = (at + 1) * sizeof(T);
			if (_Size >= x)
				((T*)_Data)[at] = data;
			else
			{
				T* mem = new T[at + 1];
				mem[at] = data;
				Write(mem, x);
				Clear(mem, true);
			}
		}

		//read data at offset (at) by type (T)
		template<typename T>
		T ReadAt(uint32 at = 0)
		{
			if (_Size >= sizeof(T)* (at + 1))
				return ((T*)_Data)[at];
			return null;
		}

		
	//can be set only once
	class VAPULA_API Once : Uncopiable
	{
	private:
		Lock* _Lock;
		raw _Data;
		raw _Seal;

	public:
		Once();
		~Once();

	public:
		//test if can be set
		bool CanSet();

		//set value
		void Set(raw data, uint32 size);

		//get value
		raw Get();
	};